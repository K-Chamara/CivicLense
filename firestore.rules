rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    
    // Helper function to get user role
    function getUserRole() {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.role;
    }
    
    // Helper function to check if user is admin
    function isAdmin() {
      return request.auth != null && getUserRole().id == 'admin';
    }
    
    // Helper function to check if user is government officer
    function isGovernmentOfficer() {
      return request.auth != null && getUserRole().userType == 'government';
    }
    
    // Helper function to check if user is anti-corruption officer
    function isAntiCorruptionOfficer() {
      return request.auth != null && getUserRole().id == 'anticorruption_officer';
    }
    
    // Users: allow unauthenticated read for admin existence check, authenticated read for own document
    match /users/{userId} {
      // Allow unauthenticated read only for admin users (for admin existence check)
      allow read: if request.auth == null && resource.data.isAdmin == true;
      // Allow authenticated users to read their own document
      allow read: if request.auth != null && request.auth.uid == userId;
      allow update: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null; // on signup only
      allow delete: if isAdmin();
    }
    
    // Allow unauthenticated queries on users collection only for admin existence check
    match /users {
      allow read: if request.auth == null;
      allow list: if request.auth == null;
    }
    
    // Concerns: public read if isPublic==true, otherwise officer/admin or owner
    match /concerns/{concernId} {
      allow create: if request.auth != null;
      allow read: if resource.data.isPublic == true
                  || (request.auth != null && request.auth.uid == resource.data.authorId)
                  || isGovernmentOfficer();
      
      // Status/priority updates only for officers/admins
      allow update: if isGovernmentOfficer() && 
        (request.resource.data.status == resource.data.status || 
         isValidStatus(request.resource.data.status));
      allow delete: if isAdmin();
      
      // Validate fields to reduce bad data
      function isValidStatus(s) {
        return s in ['open','in_progress','resolved','rejected'];
      }
      
      allow create: if request.resource.data.title is string
                    && request.resource.data.description is string
                    && request.resource.data.createdAt is timestamp;
    }
    
    // Allow collection-level queries for concerns (needed for public concerns screen)
    match /concerns {
      allow list: if request.auth != null; // Authenticated users can query concerns collection
      allow read: if request.auth != null; // Allow read access to concerns collection
    }
    
    // Concern comments: public read, authenticated write
    match /concern_comments/{commentId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && 
        (request.auth.uid == resource.data.authorId || isGovernmentOfficer());
    }
    
    // Concern updates: only officers can create/update
    match /concern_updates/{updateId} {
      allow read: if request.auth != null;
      allow create, update: if isGovernmentOfficer();
    }
    
    // Notifications: users can read their own
    match /notifications/{notificationId} {
      allow read: if request.auth != null && request.auth.uid == resource.data.userId;
      allow create: if isGovernmentOfficer();
    }
    
    // Budget Categories: public read access for transparency
    match /budget_categories/{categoryId} {
      allow read: if request.auth != null; // Authenticated users can read budget data
      allow create, update, delete: if isGovernmentOfficer(); // Only officers can modify
    }
    
    // Budget Items: public read access for transparency
    match /budget_items/{itemId} {
      allow read: if request.auth != null; // Authenticated users can read budget data
      allow create, update, delete: if isGovernmentOfficer(); // Only officers can modify
    }
    
    // Tenders: public read access for transparency
    match /tenders/{tenderId} {
      allow read: if request.auth != null; // Authenticated users can read tender data
      allow create, update, delete: if isGovernmentOfficer(); // Only officers can modify
    }
    
    // Tender Applications: authenticated users can read and create
    match /tender_applications/{applicationId} {
      allow read: if request.auth != null && 
        (request.auth.uid == resource.data.applicantId || isGovernmentOfficer());
      allow create: if request.auth != null; // Users can apply for tenders
      allow update, delete: if request.auth != null && 
        (request.auth.uid == resource.data.applicantId || isGovernmentOfficer());
    }
    
    // Concern Supports: users can read and manage their own support status
    match /concern_supports/{supportId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && 
        request.auth.uid == resource.data.userId;
    }
    
    // Default deny for everything else
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
